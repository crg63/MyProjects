'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GoogleAuthExport = function GoogleAuthExport(config) {
    return function (Component) {
        var clientId = config.clientId,
            discoveryDocs = config.discoveryDocs,
            scope = config.scope,
            SignIn = config.signIn;


        return function (_React$Component) {
            _inherits(GoogleAuthHock, _React$Component);

            function GoogleAuthHock(props) {
                _classCallCheck(this, GoogleAuthHock);

                var _this = _possibleConstructorReturn(this, (GoogleAuthHock.__proto__ || Object.getPrototypeOf(GoogleAuthHock)).call(this, props));

                _this.state = {
                    isSignedIn: false,
                    initializing: false,
                    error: null,
                    signingIn: false,
                    signingOut: false
                };

                _this.handleSignInClick = _this.handleSignInClick.bind(_this);
                _this.handleSignOutClick = _this.handleSignOutClick.bind(_this);
                _this.updateSignInStatus = _this.updateSignInStatus.bind(_this);
                return _this;
            }

            _createClass(GoogleAuthHock, [{
                key: 'componentDidMount',
                value: function componentDidMount() {
                    var _this2 = this;

                    this.setState({
                        initializing: true
                    });

                    gapi.client.init({
                        clientId: clientId,
                        discoveryDocs: discoveryDocs,
                        scope: scope
                    }).then(function () {
                        var _gapi$auth2$getAuthIn = gapi.auth2.getAuthInstance(),
                            isSignedIn = _gapi$auth2$getAuthIn.isSignedIn;

                        isSignedIn.listen(_this2.updateSignInStatus);
                        _this2.updateSignInStatus(isSignedIn.get());

                        _this2.setState({
                            initializing: false
                        });
                    }, function (error) {
                        _this2.setState({
                            error: error,
                            initializing: false
                        });
                    });
                }
            }, {
                key: 'handleSignInClick',
                value: function handleSignInClick() {
                    this.setState({
                        signingIn: true
                    });
                    gapi.auth2.getAuthInstance().signIn();
                }
            }, {
                key: 'handleSignOutClick',
                value: function handleSignOutClick() {
                    this.setState({
                        signingOut: true
                    });
                    gapi.auth2.getAuthInstance().signOut();
                }
            }, {
                key: 'updateSignInStatus',
                value: function updateSignInStatus(isSignedIn) {
                    this.setState({
                        isSignedIn: isSignedIn,
                        signingIn: false,
                        signingOut: false
                    });
                }
            }, {
                key: 'render',
                value: function render() {
                    var _state = this.state,
                        initializing = _state.initializing,
                        isSignedIn = _state.isSignedIn,
                        error = _state.error,
                        signingIn = _state.signingIn,
                        signingOut = _state.signingOut;


                    if (!isSignedIn) {
                        return _react2.default.createElement(SignIn, _extends({}, this.props, {
                            onSignInClick: this.handleSignInClick,
                            initializing: initializing,
                            error: error,
                            signingIn: signingIn
                        }));
                    }

                    return _react2.default.createElement(Component, _extends({}, this.props, {
                        onSignOutClick: this.handleSignOutClick,
                        signingOut: signingOut
                    }));
                }
            }]);

            return GoogleAuthHock;
        }(_react2.default.Component);
    };
};

exports.default = GoogleAuthExport;